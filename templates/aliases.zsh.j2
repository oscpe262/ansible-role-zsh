### {{ ansible_managed }} - role: zsh
## ALIASES
  ## MODIFIED COMMANDS

    alias cd..='cd ..'
    alias cp='cp -av'
    alias df='df -h'
    alias diff='colordiff'              # requires colordiff package
    alias dir='dir --color=auto'
    alias grep='grep --color=tty -d skip'
    alias mkdir='mkdir -p -v'
    alias ping='ping -c 5'
    alias less='most'
    alias ls='{{ ls }} -F'
    alias lr='{{ ls }} -RT'                    # recursive ls
    alias ll='{{ ls }} -alhFg --git'
    alias la='{{ ls }} -aF'
    alias lm='la | less'
    alias mv='mv -v'
    alias rsync='rsync -vh --progress'

  ## APPLICATION ALIASES
#    alias nano='nano -w'
#    alias emacs='emacsclient -nw'
    alias nano='vim'
    alias emacs='vim'
    alias emc='vim'
    alias g++='g++ -std=c++14 -Wall -Wextra -Werror -fdiagnostics-color=always'
    alias g11='g++ -std=c++11 -Wall -Wextra -Werror -fdiagnostics-color=always'
    alias gcc='gcc -Wall -Wextra -std=c99 -pedantic -fdiagnostics-color=always -g'
    alias clock='tty-clock -cBC 3 -f %Y-%m-%d'
    alias latexmk='latexmk -pdf -pvc'

  ## MISC ALIASES
    alias cls='reset'
    alias fucking='sudo'
    alias ponysay='ponysay -Wi'

  ## PRIVILEGED ACCESS
    alias reboot='sudo reboot'
    alias mount='sudo mount'
    alias umount='sudo umount'
    alias chown='sudo chown'
    alias chmod='sudo chmod'

{% if 'Arch Linux' in ansible_distribution %}
  ## PACMAN ALIASES
    alias pacman='sudo pacman'
    alias pac='pacaur -S'      # default action     - install one or more packages
    alias pacu='pacman -Syu'   # '[u]pdate'         - upgrade all packages to their newest version
    alias pacs='pacaur -Ss'    # '[s]earch'         - search for a package using one or more keywords
    alias paci='pacman -Si'    # '[i]nfo'           - show information about a package
    alias pacr='pacman -R'     # '[r]emove'         - uninstall one or more packages
    alias pacl='pacman -Sl'    # '[l]ist'           - list all packages of a repository
    alias pacll='pacman -Qqm'  # '[l]ist [l]ocal'   - list all packages which were locally installed (e.g. AUR packages)
    alias paclo='pacman -Qdt'  # '[l]ist [o]rphans' - list all packages which are orphaned
    alias paco='pacman -Qo'    # '[o]wner'          - determine which package owns a given file
    alias pacf='pacman -Ql'    # '[f]iles'          - list all files installed by a given package
    alias pacc='pacman -Sc'    # '[c]lean cache'    - delete all not currently installed package files
    alias pacm='makepkg -fci'  # '[m]ake'           - make package from PKGBUILD file in current directory
    alias paccurrupt='find /var/cache/pacman/pkg -name '\''*.part.*'\'''
    alias pactest='pacman -Sql testing | xargs pacman -Q 2>/dev/null'

    alias pS='pacman -S --noconfirm'
    alias pSs='pacman -Ss'
    alias pR='pacman -Rns'
    alias pU='pacman -U'

    alias yS='yaourt -S --noconfirm --needed'
    alias ySs='yaourt -Ss'
    alias update='yaourt -Syua'
    alias refresh='pacman -Syy'
{% endif %}

## RANDOM SCRIPTS
urar() {
    rm $1/*.added
    rm extlog
    BASE="/LVM/Videos"
exec <<EOF
`find $1 -mindepth 0 -maxdepth 5 -type f -iname "*.part01.rar" && find $1 -mindepth 0 -maxdepth 5 -type f -iname "*.part001.rar" && find $1 -mindepth 0 -maxdepth 5 -type f -iname "*[A-Zaz].rar"`
EOF
while read rar; do
    if [[ ${rar} = *Formula* ]]; then
	DEST=/F1/2017/
        mv `echo ${rar} | sed "s/\/$(basename ${rar})//"` ${DEST}
	break
    elif [[ ${rar} = *S[0-9][0-9]E* ]]; then
	MOV=0
	DEST=/TV/`echo $(basename $(dirname ${rar})) | sed 's/\.S[0-9][0-9]E.*//'`/
    elif [[ ${rar} = *720* ]];then
	MOV=HD
	DEST=/Movies/HD/$(basename $(dirname ${rar}))/
    elif [[ ${rar} = *1080* ]]; then
	MOV=HD
	DEST=/Movies/HD/$(basename $(dirname ${rar}))/
    else
	MOV=SD
	DEST=/Movies/SD/$(basename $(dirname ${rar}))/
    fi
    if [[ ${rar} = *Subs* ]]; then
	# Assuming no subs for SD movies
	if [[ ${MOV} != 0 ]]; then
	    DEST=/Movies/${MOV}/$(basename $(dirname $(dirname ${rar})))/Subs/
	else
	    DEST=/TV/`echo $(basename $(dirname $(dirname ${rar}))) | sed 's/\.S[0-9][0-9]E.*//'`/
	fi
    fi
    unrar e -o- ${rar} ${BASE}${DEST}
    [[ $? == 0 ]] && echo -e "`tput setaf 2`Success:`tput sgr 0` ${rar}  to  ${BASE}${DEST}" >> extlog || echo -e "`tput setaf 1`Failed ($?):`tput sgr 0` ${rar} to ${BASE}${DEST}" >> extlog
    chown -R $USER:users ${BASE}${DEST}
done
tput clear
cat extlog
rm extlog
}


photosort() {
    for f in *.jpg
    do
	mkdir $(identify -verbose $f | grep exif:DateTime: | cut -c20-29)
	mv $f $(identify -verbose $f | grep exif:DateTime: | cut -c20-29)
    done
}

remv() {
    mkdir ../tmp
    cp -ra $1 ../tmp/
    rm -r $1
    mv ../tmp/$1 .
    rmdir ../tmp
}

splitflac() {
    if [ -f "$1" ]; then
	i=0
	for cuefile in *.cue; do
	    i=$(($i + 1))
	done
	if [ $i -eq 1 ]; then
	    # precies 1 cuesheet gevonden
	    if grep -q "INDEX 01 00:00:00" *.cue ; then
		nice shntool split -t "%n %t" -f *.cue "$1"
	    else
		echo "The first track has a pre-gap. Shntool will cut that off and put it in a seperate file."
		echo "You don't want that. Please modify the cuesheet from:"
		grep -m1 "INDEX 00" *.cue
		grep -m1 "INDEX 01" *.cue
		echo "to:"
		echo "    INDEX 01 00:00:00"
		exit 1
	    fi
	elif [ $i -eq 0 ]; then
	    echo "No cuesheet found in the current directory."
	    exit 1
	elif [ $i -gt 1 ]; then
	    echo "$i cuesheets found in the current directory. Please remove the superfluous cuesheets."
	    exit 1
	fi
    else
	echo "Split image file (flac, ape, wav, etc.) according to cue-file."
	echo "Output files are in FLAC."
	echo "Usage: `basename $0` <image-file>"
	exit 1
    fi

    echo
    album=`grep -m 1 TITLE *.cue | cut -d\" -f2`
    artist=`grep -m 1 PERFORMER *.cue | cut -d\" -f2`

    for file in [0-9]*.wav; do
	echo "Encoding $file"

	if [[ ${file:0:1} == 0 ]] ; then
	    tracknr=${file:1:1}
	else
	    tracknr=${file:0:2}
	fi
	title=`echo ${file:2} | sed -e "s/.wav$//"`

	nice flac -s -T "artist=$artist" -T "album=$album" -T "title=$title" \
	     -T "tracknumber=$tracknr" "$file" && rm "$file"
    done
}

temp(){
    test -e /sys/devices/platform/coretemp.0/hwmon/hwmon0/temp1_input
    if [ $? -eq 0 ]
    then
	sed -i '/hwmon[0-9]/{s//hwmon0/;h};${x;/./{x;q0};x;q1}' /home/splatrat/.config/i3status.conf
	print "\x1b[32;1mhwmon0 set\x1b[0m"
    else
	test -e /sys/devices/platform/coretemp.0/hwmon/hwmon1/temp1_input
	if [ $? -eq 0 ]
	then
	    sed -i '/hwmon[0-9]/{s//hwmon1/;h};${x;/./{x;q0};x;q1}' /home/splatrat/.config/i3status.conf
	    print "\x1b[32;1mhwmon1 set\x1b[0m"
	else
	    sed -i '/hwmon[0-9]/{s//hwmon2/;h};${x;/./{x;q0};x;q1}' /home/splatrat/.config/i3status.conf
	    print "\x1b[32;1mhwmon2 set\x1b[0m"
	fi
    fi
}

xoff(){
    xset dpms 0 0 0
    xset -dpms
    xset s 0 0
    xset s noblank
    xset s noexpose
    xset s off
}
